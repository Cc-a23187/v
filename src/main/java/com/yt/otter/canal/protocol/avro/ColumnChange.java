/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.yt.otter.canal.protocol.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ColumnChange extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7688935850004616921L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ColumnChange\",\"namespace\":\"com.yt.otter.canal.protocol.avro\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"preValue\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mysqlType\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence value;
  @Deprecated public java.lang.CharSequence preValue;
  @Deprecated public java.lang.CharSequence mysqlType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ColumnChange() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param value The new value for value
   * @param preValue The new value for preValue
   * @param mysqlType The new value for mysqlType
   */
  public ColumnChange(java.lang.CharSequence name, java.lang.CharSequence value, java.lang.CharSequence preValue, java.lang.CharSequence mysqlType) {
    this.name = name;
    this.value = value;
    this.preValue = preValue;
    this.mysqlType = mysqlType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return value;
    case 2: return preValue;
    case 3: return mysqlType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: value = (java.lang.CharSequence)value$; break;
    case 2: preValue = (java.lang.CharSequence)value$; break;
    case 3: mysqlType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.CharSequence getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.CharSequence value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'preValue' field.
   * @return The value of the 'preValue' field.
   */
  public java.lang.CharSequence getPreValue() {
    return preValue;
  }

  /**
   * Sets the value of the 'preValue' field.
   * @param value the value to set.
   */
  public void setPreValue(java.lang.CharSequence value) {
    this.preValue = value;
  }

  /**
   * Gets the value of the 'mysqlType' field.
   * @return The value of the 'mysqlType' field.
   */
  public java.lang.CharSequence getMysqlType() {
    return mysqlType;
  }

  /**
   * Sets the value of the 'mysqlType' field.
   * @param value the value to set.
   */
  public void setMysqlType(java.lang.CharSequence value) {
    this.mysqlType = value;
  }

  /**
   * Creates a new ColumnChange RecordBuilder.
   * @return A new ColumnChange RecordBuilder
   */
  public static com.yt.otter.canal.protocol.avro.ColumnChange.Builder newBuilder() {
    return new com.yt.otter.canal.protocol.avro.ColumnChange.Builder();
  }

  /**
   * Creates a new ColumnChange RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ColumnChange RecordBuilder
   */
  public static com.yt.otter.canal.protocol.avro.ColumnChange.Builder newBuilder(com.yt.otter.canal.protocol.avro.ColumnChange.Builder other) {
    return new com.yt.otter.canal.protocol.avro.ColumnChange.Builder(other);
  }

  /**
   * Creates a new ColumnChange RecordBuilder by copying an existing ColumnChange instance.
   * @param other The existing instance to copy.
   * @return A new ColumnChange RecordBuilder
   */
  public static com.yt.otter.canal.protocol.avro.ColumnChange.Builder newBuilder(com.yt.otter.canal.protocol.avro.ColumnChange other) {
    return new com.yt.otter.canal.protocol.avro.ColumnChange.Builder(other);
  }

  /**
   * RecordBuilder for ColumnChange instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ColumnChange>
    implements org.apache.avro.data.RecordBuilder<ColumnChange> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence value;
    private java.lang.CharSequence preValue;
    private java.lang.CharSequence mysqlType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yt.otter.canal.protocol.avro.ColumnChange.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.preValue)) {
        this.preValue = data().deepCopy(fields()[2].schema(), other.preValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mysqlType)) {
        this.mysqlType = data().deepCopy(fields()[3].schema(), other.mysqlType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ColumnChange instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yt.otter.canal.protocol.avro.ColumnChange other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.preValue)) {
        this.preValue = data().deepCopy(fields()[2].schema(), other.preValue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mysqlType)) {
        this.mysqlType = data().deepCopy(fields()[3].schema(), other.mysqlType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.CharSequence getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder setValue(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder clearValue() {
      value = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'preValue' field.
      * @return The value.
      */
    public java.lang.CharSequence getPreValue() {
      return preValue;
    }

    /**
      * Sets the value of the 'preValue' field.
      * @param value The value of 'preValue'.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder setPreValue(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.preValue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'preValue' field has been set.
      * @return True if the 'preValue' field has been set, false otherwise.
      */
    public boolean hasPreValue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'preValue' field.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder clearPreValue() {
      preValue = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mysqlType' field.
      * @return The value.
      */
    public java.lang.CharSequence getMysqlType() {
      return mysqlType;
    }

    /**
      * Sets the value of the 'mysqlType' field.
      * @param value The value of 'mysqlType'.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder setMysqlType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.mysqlType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mysqlType' field has been set.
      * @return True if the 'mysqlType' field has been set, false otherwise.
      */
    public boolean hasMysqlType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mysqlType' field.
      * @return This builder.
      */
    public com.yt.otter.canal.protocol.avro.ColumnChange.Builder clearMysqlType() {
      mysqlType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public ColumnChange build() {
      try {
        ColumnChange record = new ColumnChange();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.preValue = fieldSetFlags()[2] ? this.preValue : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.mysqlType = fieldSetFlags()[3] ? this.mysqlType : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
